#!/usr/bin/env python
import sys
import json
import logging
import argparse

import hgacclient

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='HGAC Client')

  # Generate sub-parsers for each command.
  subparser = parser.add_subparsers(help='subcommand help')

  # Adding of FastQ files to metadata server.
  add_fastq = subparser.add_parser('add_fastq',help='Add a FastQ file.')
  add_fastq.set_defaults(func=hgacclient.plugin.add_fastq)
  add_fastq.add_argument('serv',help='Server name.')
  add_fastq.add_argument('name',help='FastQ file.')
  add_fastq.add_argument('-c','--conflict',choices=['error','replace','update'],
                         default='error',help='How to deal with insert conflicts.')

  # TODO additional subcommands

  # Global optional arguments.
  parser.add_argument('-d','--debug',dest='loglevel',action='store_const',
                      const=logging.DEBUG,default=logging.INFO,
                      help='Set logging level to DEBUG.')
  parser.add_argument('-u','--username',help='Authentication username.')
  parser.add_argument('-p','--password',help='Authentication password.')

  args = parser.parse_args()

  logging.basicConfig(
    level = args.loglevel,
    format = '%(asctime)s %(name)-6s %(levelname)-4s %(message)s',
  )
  logging.info(args)

  try: status,retval = 0,args.func(**args.__dict__)
  except Exception as err: status,retval = 1,{'error': str(err)}
  else: sys.exit(status)
  finally: sys.stdout.write('%s\n' % json.dumps(retval))
